service: ezmc-game-service
frameworkVersion: '3'

plugins:
  - serverless-bundle
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: "${opt:stage, 'main'}"
  stackTags:
    Stage: '${self:provider.stage}'
    Region: '${self:provider.region}'
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
  logs:
    frameworkLambda: true
    restApi:
      accessLogging: true
      executionLogging: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'cloudformation:*'
            - 'ec2:*'
            - 'ecs:*'
            - 'elasticfilesystem:*'
            - 'ssm:*'
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - 's3:GetObject'
          Resource:
            - 'arn:aws:s3:::ezmc-cf-templates/game-server.yml'

package:
  individually: true

functions:
  down:
    handler: src/functions/down/handler.main
    events:
      - http:
          path: down
          method: post
          cors: true
          request:
            schemas:
              application/json: src/functions/down/schema.ts
  ipAddress:
    handler: src/functions/ip-address/handler.main
    events:
      - http:
          path: ipAddress
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  start:
    handler: src/functions/start/handler.main
    events:
      - http:
          path: start
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  status:
    handler: src/functions/status/handler.main
    events:
      - http:
          path: status
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  stop:
    handler: src/functions/stop/handler.main
    events:
      - http:
          path: stop
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  up:
    handler: src/functions/up/handler.main
    events:
      - http:
          path: up
          method: post
          cors: true
          request:
            schemas:
              application/json: src/functions/up/schema.ts
