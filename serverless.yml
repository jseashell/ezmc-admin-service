service: ezmc-game-service
frameworkVersion: '3'

plugins:
  - serverless-bundle
  - serverless-s3-sync

custom:
  assetBucketName: ${self:service}-assets-${self:provider.stage}
  s3Sync: # serverless-s3-sync
    - bucketName: ${self:custom.assetBucketName}
      localDir: /src/assets/stacks
      deleteRemoved: true
      bucketTags:
        - Stage: ${self:provider.stage}
        - Region: ${self:provider.region}

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'main'}
  runtime: nodejs16.x
  stackTags:
    Stage: ${self:provider.stage}
    Region: ${self:provider.region}
  deploymentBucket:
    name: deployments-${aws:accountId}-${self:provider.region}
    blockPublicAccess: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    ASSET_BUCKET_NAME: ${self:custom.assetBucketName}
    CF_GAME_SERVER_OBJECT_KEY: TODO
  logs:
    frameworkLambda: true
    restApi:
      accessLogging: true
      executionLogging: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'ec2:DescribeInstances'
            - 'ecs:DescribeContainerInstances'
            - 'ecs:DescribeServices'
            - 'ecs:DescribeTasks'
            - 'ecs:ListContainerInstances'
            - 'ecs:ListServices'
            - 'ecs:ListTasks'
            - 'ecs:UpdateService'
          Resource:
            - '*'
        - Effect: 'Allow'
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.assetBucketName}/*'

package:
  individually: true

functions:
  down:
    handler: ./src/functions/down/handler.down
    events:
      - http:
          path: down
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(./src/functions/down/schema.json)}
  ipAddress:
    handler: src/functions/ip-address/handler.ipAddress
    events:
      - http:
          path: ipAddress
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  start:
    handler: src/functions/start/handler.start
    events:
      - http:
          path: start
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  status:
    handler: src/functions/status/handler.status
    events:
      - http:
          path: status
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  stop:
    handler: src/functions/stop/handler.stop
    events:
      - http:
          path: stop
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                clusterName: true
  up:
    handler: ./src/functions/up/handler.up
    events:
      - http:
          path: up
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(./src/functions/up/schema.json)}

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.assetBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
